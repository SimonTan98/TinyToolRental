-- Tool rental database creation script using ORACLE DB
-- Created by: Simon Tan, Julie Nguyen, Thuvarahan Ragunathan, Meadow Ship
-- Run as "sys as sysdba"

--Create Storage
CREATE TABLESPACE tool_rental
  DATAFILE 'tool_rental.dat' SIZE 100M
  ONLINE;

--Create user for admin of toolRental database
CREATE USER toolRentalAdmin IDENTIFIED BY toolAdminPassword ACCOUNT UNLOCK
  DEFAULT TABLESPACE tool_rental
  QUOTA 50M ON tool_rental;

--Create user for employee of toolRental database
CREATE USER toolRentalUser IDENTIFIED BY userPassword ACCOUNT UNLOCK
  DEFAULT TABLESPACE tool_rental
  QUOTA 50M ON tool_rental;

--Create role for user
CREATE ROLE toolsAdmin;
CREATE ROLE toolsUser;

--Grant privileges to the roles
GRANT CONNECT, RESOURCE, CREATE VIEW, CREATE TRIGGER, CREATE PROCEDURE TO toolsAdmin;
GRANT CONNECT, RESOURCE TO toolsUser;

--Assign users to roles
GRANT toolsAdmin TO toolRentalAdmin;
GRANT toolsUser to toolRentalUser;

--Connect to database as admin
CONNECT toolRentalAdmin/toolAdminPassword;

--Create database tables
CREATE TABLE CUSTOMERS (
	Customer_Id INT GENERATED BY DEFAULT AS IDENTITY,
	First_Name VARCHAR2(30) NOT NULL,
	Last_Name VARCHAR2(30) NOT NULL,
	Email VARCHAR2(50) NULL,
	Address VARCHAR2(100) NOT NULL,
	Postal_Code VARCHAR2(6) NOT NULL,
	City VARCHAR2(30) NOT NULL,
	Province VARCHAR2(20) NOT NULL,
	Country VARCHAR2(30) NOT NULL,
	CONSTRAINT Customer_IdPK PRIMARY KEY (Customer_Id)
);

CREATE TABLE PHONES (
  Phone_Id INT GENERATED BY DEFAULT AS IDENTITY,
  Phone_Number VARCHAR2(10) NOT NULL,
  CONSTRAINT Phone_IdPK PRIMARY KEY (Phone_Id)
);

-- INSERT INTO PHONES VALUES (1,'Unknown');

CREATE TABLE CUSTOMERS_PHONES (
	Customer_Id INT NOT NULL,
	Phone_Id INT NOT NULL,
	Start_Time TIMESTAMP NOT NULL,
	End_Time TIMESTAMP NULL,
	CONSTRAINT customer_id_customers_phonesFK FOREIGN KEY (Customer_Id) 
    REFERENCES Customers(customer_id),
	CONSTRAINT phone_id_customers_phonesFK FOREIGN KEY (Phone_Id)
    REFERENCES PHONES(Phone_Id)
);

CREATE TABLE ORDERS (
	Order_Id INT GENERATED BY DEFAULT AS IDENTITY,
	Customer_Id INT NOT NULL,
	Order_Date DATE NOT NULL,
	Final_Price DECIMAL(8,2) NOT NULL,
	Order_Status VARCHAR2(8) DEFAULT 'Ongoing' NOT NULL,
	CONSTRAINT Order_IdPK PRIMARY KEY (Order_Id),
	CONSTRAINT Customers_OrdersFK FOREIGN KEY (Customer_Id) 
    REFERENCES CUSTOMERS(Customer_Id),
	CONSTRAINT order_date_check CHECK (Order_Date > DATE '2000-01-01'),
	CONSTRAINT final_price_check CHECK(Final_Price >= 0),
	CONSTRAINT order_status_check CHECK(Order_Status IN('Ongoing', 'Complete'))
);

CREATE TABLE RETURN_DATES (
	Return_Date_Id INT GENERATED BY DEFAULT AS IDENTITY,
  Return_Date DATE NOT NULL,
  CONSTRAINT Return_Date_IdPK PRIMARY KEY(Return_Date_Id)
);

CREATE TABLE ORDERS_RETURN_DATES (
	Order_Id INT NOT NULL,
  Return_Date_Id INT NOT NULL,
  Start_Time TIMESTAMP NOT NULL,
  End_Time TIMESTAMP NULL,
  CONSTRAINT order_idFK FOREIGN KEY (order_id) 
    REFERENCES ORDERS(Order_Id),
  CONSTRAINT return_date_idFK FOREIGN KEY (Return_Date_Id) 
    REFERENCES RETURN_DATES(Return_Date_Id)
);

CREATE TABLE TOOL_TYPES (
	Tool_Type_Id INT GENERATED BY DEFAULT AS IDENTITY,
	Tool_Type_Name VARCHAR2(50) NOT NULL,
	CONSTRAINT Tool_Type_IdPK PRIMARY KEY (Tool_Type_Id)
);

CREATE TABLE TOOLS (
	Tool_Id INT GENERATED BY DEFAULT AS IDENTITY,
	Tool_Name VARCHAR2(30) NOT NULL,
	Tool_Description VARCHAR2(100) NOT NULL,
	Tool_Type_Id INT NOT NULL,
	Previous_Model INT NULL,
	Stock_Quantity INT NOT NULL,
	Quantity_Rented INT DEFAULT 0 NOT NULL,
	CONSTRAINT Tool_IdPK PRIMARY KEY (Tool_Id),
	CONSTRAINT tool_type_idFK FOREIGN KEY (Tool_Type_Id) 
    REFERENCES TOOL_TYPES(Tool_Type_Id),
  CONSTRAINT previous_modelFK FOREIGN KEY (Previous_Model) 
    REFERENCES TOOLS(Tool_Id),
	CONSTRAINT stock_quantity_check CHECK (Stock_Quantity >= 0),
	CONSTRAINT quantity_rented_check CHECK(quantity_rented <= stock_quantity 
    AND quantity_rented >= 0)
);

CREATE TABLE RENTAL_PRICES (
	Rental_Price_Id INT GENERATED BY DEFAULT AS IDENTITY,
	Rental_Price DECIMAL(6,2) NOT NULL,
  CONSTRAINT Rental_Price_IdPK PRIMARY KEY (Rental_Price_Id),
  CONSTRAINT rental_price_check CHECK (Rental_Price >= 0)
);

CREATE TABLE TOOLS_RENTAL_PRICES (
	Tool_Id INT NOT NULL,
	Rental_Price_Id INT NOT NULL,
	Start_Time TIMESTAMP NOT NULL,
	End_Time TIMESTAMP NULL,
	CONSTRAINT tool_idFK FOREIGN KEY(Tool_Id)
    REFERENCES TOOLS(Tool_Id),
	CONSTRAINT rental_price_idFK FOREIGN KEY (Rental_Price_Id) 
    REFERENCES RENTAL_PRICES(Rental_Price_Id)
);

CREATE TABLE ORDER_LINES (
	Order_Line_Id INT GENERATED BY DEFAULT AS IDENTITY,
	Order_Id INT NOT NULL,
	Tool_Id INT NOT NULL,
	Quantity_Ordered INT NOT NULL,
	Row_Price DECIMAL (8,2) NOT NULL,
	CONSTRAINT Order_Line_IdPK PRIMARY KEY (Order_Line_Id),
	CONSTRAINT order_line_orderFK FOREIGN KEY (Order_Id) 
		REFERENCES ORDERS(Order_Id),
	CONSTRAINT order_line_toolFK FOREIGN KEY (Tool_Id) 
		REFERENCES TOOLS(Tool_Id),
	CONSTRAINT quantity_check CHECK (Quantity_Ordered > 0)
);

CREATE TABLE SCREWDRIVERS (
	Tool_Id INT NOT NULL,
	Head_Shape VARCHAR2(20) NOT NULL,
	CONSTRAINT Tool_Id_ScrewdriversPK PRIMARY KEY (Tool_Id),
	CONSTRAINT screwdriver_tool_idFK FOREIGN KEY (Tool_Id) 
		REFERENCES TOOLS(Tool_Id)
			ON DELETE CASCADE,
	CONSTRAINT head_shape_check CHECK(Head_Shape IN ('cross', 'triangle', 'square', 'slotted'))
);

CREATE TABLE CHAINSAWS (
	Tool_Id INT NOT NULL,
	Power_Source VARCHAR2(20) NOT NULL,
	Guide_Bar_Length INT NOT NULL,
	Weight DECIMAL(3,1) NOT NULL,
	CONSTRAINT Tool_Id_ChainsawsPK PRIMARY KEY (Tool_Id),
	CONSTRAINT chainsaw_tool_idFK FOREIGN KEY (Tool_Id) 
		REFERENCES TOOLS(Tool_Id)
			ON DELETE CASCADE,
	CONSTRAINT power_source_check CHECK(Power_Source IN ('gas', 'battery', 'electric'))
);

CREATE TABLE POWERDRILLS (
	Tool_Id INT NOT NULL,
	Max_Rpm INT NOT NULL,
	Cord VARCHAR2(3) NOT NULL,
	CONSTRAINT Tool_Id_PowerdrillsPK PRIMARY KEY (Tool_Id),
	CONSTRAINT powerdrill_tool_idFK FOREIGN KEY (Tool_Id) 
		REFERENCES TOOLS(Tool_Id)
			ON DELETE CASCADE,
	CONSTRAINT cord_check CHECK (Cord IN ('yes', 'no'))
);

INSERT INTO TOOL_TYPES VALUES (1, 'Screwdriver');
INSERT INTO TOOL_TYPES VALUES (2, 'Powerdrill');
INSERT INTO TOOL_TYPES VALUES (3, 'Chainsaw');

-- Customers insert 
INSERT INTO CUSTOMERS(First_Name, Last_Name, Email, Address, Postal_Code, City, Province, Country)
    VALUES 
    ('Patrick', 'Star', 'nothisispatrick@bikib.com', '123 Rock Way', 'K2J4E4', 'Bikini Bottom', 'Ontario', 'Canada');
INSERT INTO CUSTOMERS(First_Name, Last_Name, Email, Address, Postal_Code, City, Province, Country)
    VALUES 
    ('Spunchbob', 'Squarepants', 'spongecaked@frycook.com', '456 Pineapple Road', 'K4J3I9', 'Bikini Bottom', 'Ontario', 'Canada');
INSERT INTO CUSTOMERS(First_Name, Last_Name, Email, Address, Postal_Code, City, Province, Country)
    VALUES 
    ('Yugi', 'Muto', 'atem@pharoah.co', '982 Millenium Drive', 'K2H3U8', 'Domino', 'Ontario', 'Canada');
INSERT INTO CUSTOMERS(First_Name, Last_Name, Email, Address, Postal_Code, City, Province, Country)
    VALUES 
    ('Kaiba', 'Seto', 'myblueeyes@whitedragon.co', '283 Azure Street', 'K2J3I4', 'Domino', 'Ontario', 'Canada');
INSERT INTO CUSTOMERS(First_Name, Last_Name, Email, Address, Postal_Code, City, Province, Country)
    VALUES 
    ('Joey', 'Wheeler', 'underdog@yahoo.com', '109 Red Road', 'K9J2K3', 'Domino', 'Ontario', 'Canada');
INSERT INTO CUSTOMERS(First_Name, Last_Name, Email, Address, Postal_Code, City, Province, Country)
    VALUES 
    ('Yusei', 'Fudo', 'stardust@signer.net', '787 Satellite Drive', 'K2I3O3', 'New Domino', 'Ontario', 'Canada');
INSERT INTO CUSTOMERS(First_Name, Last_Name, Email, Address, Postal_Code, City, Province, Country)
    VALUES 
    ('Jack', 'Atlas', 'archfiend@signer.com', '878 King Road', 'K0P2O3', 'New Domino', 'Ontario', 'Canada');
INSERT INTO CUSTOMERS(First_Name, Last_Name, Email, Address, Postal_Code, City, Province, Country)
    VALUES 
    ('Joseph', 'Joestar', 'vinesandthorns@bloodystream.com', '1982 Tequila Way', 'K9I2E3', 'Little Italy', 'Ontario', 'Canada');
	
-- Phone Inserts
INSERT INTO PHONES(Phone_Number) VALUES('Unknown');
INSERT INTO PHONES(Phone_Number) VALUES ('6138255412');
INSERT INTO PHONES(Phone_Number) VALUES ('8192034785');
INSERT INTO PHONES(Phone_Number) VALUES ('2983890478');
INSERT INTO PHONES(Phone_Number) VALUES ('3943789203');
INSERT INTO PHONES(Phone_Number) VALUES ('1823795027');
INSERT INTO PHONES(Phone_Number) VALUES ('1234567891');
INSERT INTO PHONES(Phone_Number) VALUES ('5987654321');
INSERT INTO PHONES(Phone_Number) VALUES ('3879597489');
INSERT INTO PHONES(Phone_Number) VALUES ('2987349853');
INSERT INTO PHONES(Phone_Number) VALUES ('5937590432');
INSERT INTO PHONES(Phone_Number) VALUES ('9283749609');
INSERT INTO PHONES(Phone_Number) VALUES ('3458789485');
INSERT INTO PHONES(Phone_Number) VALUES ('8738479857');
INSERT INTO PHONES(Phone_Number) VALUES ('2763785943');
INSERT INTO PHONES(Phone_Number) VALUES ('5172839405');
INSERT INTO PHONES(Phone_Number) VALUES ('7697857374');

-- Customer phones associative table insert
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (1, 1, TO_TIMESTAMP('01-01-2022 10:13:18', 'DD-MM-YYYY HH:MI:SS'), TO_TIMESTAMP('01-02-2023 10:12:18', 'DD-MM-YYYY HH:MI:SS'));
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (1, 2, TO_TIMESTAMP('01-02-2023 10:12:18', 'DD-MM-YYYY HH:MI:SS'), SYSTIMESTAMP);
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (1, 3, SYSTIMESTAMP, NULL);

INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (2, 4, TO_TIMESTAMP('01-12-2024 12:12:12', 'DD-MM-YYYY HH:MI:SS'), SYSTIMESTAMP);
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (2, 5, SYSTIMESTAMP, NULL);

INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (3, 6, TO_TIMESTAMP('03-03-2023 10:10:10', 'DD-MM-YYYY HH:MI:SS'), NULL);

INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (4, 7, TO_TIMESTAMP('01-01-2023 08:23:23', 'DD-MM-YYYY HH:MI:SS'), TO_TIMESTAMP('06-06-2023 12:26:25', 'DD-MM-YYYY HH:MI:SS'));
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (4, 8, TO_TIMESTAMP('06-06-2023 12:26:25', 'DD-MM-YYYY HH:MI:SS'), TO_TIMESTAMP('02-02-2024 11:02:34', 'DD-MM-YYYY HH:MI:SS'));
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (4, 9, TO_TIMESTAMP('02-02-2024 11:02:34', 'DD-MM-YYYY HH:MI:SS'), SYSTIMESTAMP);
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (4, 10, SYSTIMESTAMP, NULL);

INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (5, 11, SYSTIMESTAMP, NULL);

INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (6, 12, SYSTIMESTAMP, NULL);

INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (7, 13, TO_TIMESTAMP('06-06-2023 06:07:24', 'DD-MM-YYYY HH:MI:SS'), TO_TIMESTAMP('10-10-2023 10:10:10', 'DD-MM-YYYY HH:MI:SS'));
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (7, 14, TO_TIMESTAMP('10-10-2023 10:10:10', 'DD-MM-YYYY HH:MI:SS'), TO_TIMESTAMP('01-02-2024 12:12:12', 'DD-MM-YYYY HH:MI:SS'));
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (7, 15, TO_TIMESTAMP('01-02-2024 12:12:12', 'DD-MM-YYYY HH:MI:SS'), SYSTIMESTAMP);
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (7, 15, SYSTIMESTAMP, NULL);

INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (8, 16, TO_TIMESTAMP('17-01-2024 08:20:20', 'DD-MM-YYYY HH:MI:SS'), TO_TIMESTAMP('05-05-2024 08:25:25', 'DD-MM-YYYY HH:MI:SS'));
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (8, 17, TO_TIMESTAMP('05-05-2024 08:25:25', 'DD-MM-YYYY HH:MI:SS'), SYSTIMESTAMP);
INSERT INTO CUSTOMERS_PHONES(Customer_ID, Phone_ID, Start_Time, End_Time)
    VALUES (8, 1, SYSTIMESTAMP, NULL);

-- Tools inserts 
INSERT INTO TOOLS (Tool_Name, Tool_Description, Tool_Type_Id, Stock_Quantity, Quantity_Rented)
VALUES ('RYOBI Battery Chainsaw', 'Model # RY4050 Cordless', 3, 100, 3);

INSERT INTO TOOLS (Tool_Name, Tool_Description, Tool_Type_Id, Stock_Quantity, Quantity_Rented)
VALUES ('RYOBI Omega Battery Chainsaw', 'MODEL#RY4051 Cordless', 3, 100, 15);

INSERT INTO TOOLS (Tool_Name, Tool_Description, Tool_Type_Id, Stock_Quantity, Quantity_Rented)
VALUES ('DEWALT Cordless Powerdrill', '20V MAX XR Hammer Drill, Brushless, 3-Speed, Tool Only (DCD996B)', 2, 100, 9);

INSERT INTO TOOLS (Tool_Name, Tool_Description, Tool_Type_Id, Stock_Quantity, Quantity_Rented)
VALUES ('Philips Head Screwdriver', '20 cm long, rubber grip, crosshead', 1, 150, 0);

-- Assuming RYOBI Alpha Battery Chainsaw is a new model of RYOBI Battery Chainsaw
INSERT INTO TOOLS (Tool_Name, Tool_Description, Tool_Type_Id, Previous_Model, Stock_Quantity, Quantity_Rented)
VALUES ('RYOBI  Alpha Battery Chainsaw', 'Updated version of Chainsaw RYOBI with longer battery life', 3, 3, 100, 10);

-- Assuming DEWALT Cordless Powerdrill 2.0 is a new model of DEWALT Cordless Powerdrill
INSERT INTO TOOLS (Tool_Name, Tool_Description, Tool_Type_Id, Previous_Model, Stock_Quantity, Quantity_Rented)
VALUES ('DEWALT Cordless Powerdrill 2.0', 'Updated version of DEWALT Cordless Powerdrill', 2, 2, 100, 3);

-- Chainsaws
-- RYOBI Battery Chainsaw
INSERT INTO CHAINSAWS (Tool_Id, Power_Source, Guide_Bar_Length, Weight)
VALUES (1, 'battery', 14, 4.6 );

-- RYOBI Omega Battery Chainsaw
INSERT INTO CHAINSAWS (Tool_Id, Power_Source, Guide_Bar_Length, Weight)
VALUES (2, 'battery', 16, 4.8 );

-- RYOBI Alpha Battery Chainsaw
INSERT INTO CHAINSAWS (Tool_Id, Power_Source, Guide_Bar_Length, Weight)
VALUES (5, 'battery', 18, 5.0 );

-- Powerdrills
-- DEWALT Cordless Powerdrill
INSERT INTO POWERDRILLS (Tool_Id, Max_Rpm, Cord)
VALUES (3, 2250,'no');

-- DEWALT Cordless Powerdrill 2.0
INSERT INTO POWERDRILLS (Tool_Id, Max_Rpm, Cord)
VALUES (6, 2500, 'no');

-- Screwdrivers
-- Philips Head Screwdriver
INSERT INTO SCREWDRIVERS (Tool_Id, Head_Shape)
VALUES (4, 'cross');


-- Rental_Prices
INSERT INTO RENTAL_PRICES (Rental_Price) VALUES (13.00);   
INSERT INTO RENTAL_PRICES (Rental_Price) VALUES (10.00);  
INSERT INTO RENTAL_PRICES (Rental_Price) VALUES (15.00);  
INSERT INTO RENTAL_PRICES (Rental_Price) VALUES (12.00);  
INSERT INTO RENTAL_PRICES (Rental_Price) VALUES (14.00);  
INSERT INTO RENTAL_PRICES (Rental_Price) VALUES (16.00);


-- Philips Head Screwdriver 
INSERT INTO TOOLS_RENTAL_PRICES (Tool_Id, Rental_Price_Id, Start_Time, End_Time)
VALUES (4, 1, TO_TIMESTAMP('2020-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2020-04-01 23:59:59', 'YYYY-MM-DD HH24:MI:SS')); 
INSERT INTO TOOLS_RENTAL_PRICES (Tool_Id, Rental_Price_Id, Start_Time, End_Time)
VALUES (4, 6, TO_TIMESTAMP('2022-04-01 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), NULL); 

-- DEWALT Cordless Powerdrill 
INSERT INTO TOOLS_RENTAL_PRICES (Tool_Id, Rental_Price_Id, Start_Time, End_Time)
VALUES (3, 2, TO_TIMESTAMP('2020-02-02 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), NULL);

-- DEWALT Cordless Powerdrill 2.0 
INSERT INTO TOOLS_RENTAL_PRICES (Tool_Id, Rental_Price_Id, Start_Time, End_Time)
VALUES (6, 3, TO_TIMESTAMP('2020-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), NULL);

-- RYOBI Battery Chainsaw 
INSERT INTO TOOLS_RENTAL_PRICES (Tool_Id, Rental_Price_Id, Start_Time, End_Time)
VALUES (1, 4, TO_TIMESTAMP('2020-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), NULL);

-- RYOBI Omega Battery Chainsaw 
INSERT INTO TOOLS_RENTAL_PRICES (Tool_Id, Rental_Price_Id, Start_Time, End_Time)
VALUES (2, 5, TO_TIMESTAMP('2020-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), NULL);

-- RYOBI Alpha Battery Chainsaw 
INSERT INTO TOOLS_RENTAL_PRICES (Tool_Id, Rental_Price_Id, Start_Time, End_Time)
VALUES (5, 6, TO_TIMESTAMP('2021-01-01 00:00:00', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2022-03-02 23:59:59', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TOOLS_RENTAL_PRICES (Tool_Id, Rental_Price_Id, Start_Time, End_Time)
VALUES ( 5, 1, TO_TIMESTAMP('2022-03-02 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), TO_TIMESTAMP('2023-04-07 23:59:59', 'YYYY-MM-DD HH24:MI:SS'));
INSERT INTO TOOLS_RENTAL_PRICES (Tool_Id, Rental_Price_Id, Start_Time, End_Time)
VALUES ( 5, 6, TO_TIMESTAMP('2023-04-07 23:59:59', 'YYYY-MM-DD HH24:MI:SS'), NULL);

-- order dummy values
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(1, TO_DATE('11-09-2024', 'DD-MM-YYYY'), 266.68, 'Complete');
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(2, TO_DATE('11-09-2024' , 'DD-MM-YYYY'), 268.94, 'Complete');
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(3, TO_DATE('30-01-2025', 'DD-MM-YYYY'), 219.22, 'Complete');
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(4, TO_DATE('02-02-2025', 'DD-MM-YYYY'), 205.66, 'Complete');
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(6, TO_DATE('31-01-2025', 'DD-MM-YYYY'), 248.60, 'Complete');
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(7, TO_DATE('03-02-2025', 'DD-MM-YYYY'), 342.39, 'Complete');
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(4, TO_DATE('29-03-2025', 'DD-MM-YYYY'), 329.96, 'Ongoing');
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(4, TO_DATE('30-03-2025', 'DD-MM-YYYY'), 214.70, 'Ongoing');
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(4, TO_DATE('21-03-2025', 'DD-MM-YYYY'), 390.98, 'Ongoing');
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(7, TO_DATE('02-04-2025', 'DD-MM-YYYY'), 348.04, 'Ongoing');
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(7, TO_DATE('03-04-2025', 'DD-MM-YYYY'), 209.05, 'Ongoing'); 
INSERT INTO ORDERS(Customer_ID, Order_Date, Final_Price, Order_Status)
VALUES
(6, TO_DATE('07-04-2025', 'DD-MM-YYYY'), 237.30, 'Ongoing');

--insert return date dummy values

INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('20-09-2024', 'dd-mm-yyyy')); 
INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('25-09-2024', 'dd-mm-yyyy')); 

INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('26-09-2024', 'dd-mm-yyyy')); 

INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('07-02-2025', 'dd-mm-yyyy')); 

INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('10-02-2025', 'dd-mm-yyyy')); 
INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('12-02-2025', 'dd-mm-yyyy'));    

INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('14-02-2025', 'dd-mm-yyyy')); 

INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('12-02-2025', 'dd-mm-yyyy')); 

INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('19-04-2025', 'dd-mm-yyyy')); 
INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('13-04-2025', 'dd-mm-yyyy')); 
INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('12-04-2025', 'dd-mm-yyyy')); 
INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('16-04-2025', 'dd-mm-yyyy')); 
INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('17-04-2025', 'dd-mm-yyyy')); 

INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('18-04-2025', 'dd-mm-yyyy'));
INSERT INTO RETURN_DATES(Return_Date) VALUES (TO_DATE('21-04-2025', 'dd-mm-yyyy'));

-- order lines inserts
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(1, 1, 1, 12.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(1, 3, 2, 20.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(1, 4, 4, 64.00);


INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(2, 2, 2, 28.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(2, 1, 5, 60.00);


INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(3, 3, 10, 100.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(3, 2, 1, 14.00);


INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(4, 4, 1, 16.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(4, 1, 2, 24.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(4, 2, 3, 42.00);


INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(5, 5, 5, 80.00);


INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(6, 2, 4, 56.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(6, 6, 3, 45.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(6, 4, 7, 112.00);


INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(7, 1, 1, 12.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(7, 2, 5, 70.00);


INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(8, 3, 5, 50.00);


INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(9, 5, 6, 96.00);	
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(9, 3, 3, 30.00);	


INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(10, 5, 4, 64.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(10, 2, 5, 70.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(10, 3, 1, 10.00);
INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(10, 1, 2, 24.00);


INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(11, 6, 3, 45.00);


INSERT INTO ORDER_LINES(Order_ID, Tool_ID, Quantity_Ordered, Row_Price) 
    VALUES 
	(12, 2, 5, 70.00 );
	
-- insert order return dates associative table dummy values
INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(1, 1, TO_TIMESTAMP('11-09-2024 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), TO_TIMESTAMP('11-09-2024 12:00:00', 'DD-MM-YYYY HH24:MI:SS'));
INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(1, 2, TO_TIMESTAMP('11-09-2024 12:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);

INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(2, 3, TO_TIMESTAMP('11-09-2024 12:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);
	
INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(3, 4, TO_TIMESTAMP('07-02-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);

INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(4, 5, TO_TIMESTAMP('02-02-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), TO_TIMESTAMP('03-02-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'));
INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(4, 6, TO_TIMESTAMP('03-02-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);

INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(5, 7, TO_TIMESTAMP('31-01-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);

INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(6, 8, TO_TIMESTAMP('03-02-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);

INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(7, 9, TO_TIMESTAMP('29-03-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);

INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(8, 10, TO_TIMESTAMP('30-03-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);

INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(9, 11, TO_TIMESTAMP('21-03-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);

INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(10, 12, TO_TIMESTAMP('02-04-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);

INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(11, 13, TO_TIMESTAMP('03-04-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);

INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(12, 14, TO_TIMESTAMP('07-04-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), TO_TIMESTAMP('08-04-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'));
INSERT INTO ORDERS_RETURN_DATES(ORDER_ID, RETURN_DATE_ID, START_TIME, END_TIME)
	VALUES(12, 15, TO_TIMESTAMP('08-04-2025 00:00:00', 'DD-MM-YYYY HH24:MI:SS'), NULL);

--Create views for historical fields
CREATE VIEW VW_CUSTOMERS_WITH_PHONES AS 
	SELECT c.Customer_Id, First_Name, Last_Name, COALESCE(p.Phone_Number, NULL) AS Phone_Number, Email, Address, Postal_Code, City, Province, Country
	FROM CUSTOMERS c LEFT JOIN CUSTOMERS_PHONES cp ON c.Customer_Id = cp.Customer_Id 
											LEFT JOIN PHONES p ON cp.Phone_Id = p.Phone_Id
	WHERE cp.End_Time IS NULL;

CREATE VIEW VW_ORDERS_WITH_RETURN_DATES AS
	SELECT o.Order_Id, Customer_Id, Order_Date, rd.Return_Date, Final_Price, Order_Status
	FROM ORDERS o JOIN ORDERS_RETURN_DATES ord ON o.Order_Id = ord.Order_Id 
									 JOIN RETURN_DATES rd ON ord.Return_Date_Id = rd.Return_Date_Id
	WHERE ord.End_Time IS NULL;

CREATE VIEW VW_TOOLS_WITH_RENTAL_PRICES AS 
	SELECT t.Tool_Id, Tool_Name, Tool_Description, rp.Rental_Price, Tool_Type_Id, Previous_Model, Stock_Quantity, Quantity_Rented
	FROM TOOLS t JOIN TOOLS_RENTAL_PRICES trp ON t.Tool_Id = trp.Tool_Id 
									JOIN RENTAL_PRICES rp ON trp.Rental_Price_Id = rp.Rental_Price_Id
	WHERE trp.End_Time IS NULL;

--Create triggers for VW_CUSTOMERS_WITH_PHONES
CREATE OR REPLACE TRIGGER insert_customers_with_phones
INSTEAD OF INSERT 
ON VW_CUSTOMERS_WITH_PHONES
FOR EACH ROW 
DECLARE 
	var_customer_id	CUSTOMERS.Customer_Id%TYPE;
  var_phone_id PHONES.Phone_Id%TYPE;
BEGIN
	INSERT INTO CUSTOMERS(First_Name, Last_Name, Email, Address, Postal_Code, City, Province, Country) VALUES
	(:NEW.First_Name, :NEW.Last_Name, :NEW.Email, :NEW.Address, :NEW.Postal_Code, :NEW.City, :NEW.Province, :NEW.Country)
	RETURNING Customer_Id INTO var_customer_id;

	IF :NEW.Phone_Number IS NULL THEN
		INSERT INTO CUSTOMERS_PHONES(Customer_Id, Phone_Id, Start_Time) 
		VALUES (var_customer_id, 1, CURRENT_TIMESTAMP);
	ELSE
		INSERT INTO PHONES(Phone_Number) VALUES (:NEW.Phone_Number)
		RETURNING Phone_Id INTO var_phone_id;
		
		INSERT INTO CUSTOMERS_PHONES(Customer_Id, Phone_Id, Start_Time) 
		VALUES (var_customer_id, var_phone_id, CURRENT_TIMESTAMP);
	END IF;
END;
/

CREATE OR REPLACE TRIGGER update_customers_with_phones
INSTEAD OF UPDATE 
ON VW_CUSTOMERS_WITH_PHONES
FOR EACH ROW 
DECLARE 
  var_phone_id PHONES.Phone_Id%TYPE;
	counter NUMBER;
BEGIN

	UPDATE CUSTOMERS 
	SET 
		First_Name = :NEW.First_Name,
		Last_Name = :NEW.Last_Name,
		Email = :NEW.Email,
		Address = :NEW.Address,
		Postal_Code = :NEW.Postal_Code,
		City = :NEW.City,
		Province = :NEW.Province,
		Country = :NEW.Country
	WHERE Customer_Id = :OLD.Customer_Id;

	IF :NEW.Phone_Number != :OLD.Phone_Number OR :NEW.Phone_Number IS NULL THEN
	
		SELECT COUNT(*) INTO counter FROM CUSTOMERS_PHONES WHERE Customer_Id = :OLD.Customer_Id AND End_Time IS NULL;
		IF counter > 0 THEN
			UPDATE CUSTOMERS_PHONES 
			SET End_Time = CURRENT_TIMESTAMP
			WHERE Customer_Id = :OLD.Customer_Id AND End_Time IS NULL;
		END IF;

		IF :NEW.Phone_Number IS NULL THEN
			INSERT INTO CUSTOMERS_PHONES(Customer_Id, Phone_Id, Start_Time) 
			VALUES (:OLD.Customer_Id, 1, CURRENT_TIMESTAMP);
		ELSE 
			INSERT INTO PHONES(Phone_Number) VALUES (:NEW.Phone_Number)
			RETURNING Phone_Id INTO var_phone_id;

			INSERT INTO CUSTOMERS_PHONES(Customer_Id, Phone_Id, Start_Time) 
			VALUES (:OLD.Customer_Id, var_phone_id, CURRENT_TIMESTAMP);
		END IF;
	END IF;
END;
/

CREATE OR REPLACE TRIGGER delete_customers_with_phones
INSTEAD OF DELETE 
ON VW_CUSTOMERS_WITH_PHONES
FOR EACH ROW 
BEGIN
	UPDATE CUSTOMERS_PHONES 
	SET End_Time = CURRENT_TIMESTAMP
	WHERE Customer_Id = :OLD.Customer_Id AND End_Time IS NULL;
END;
/


--Create triggers for VW_ORDERS_WITH_RETURN_DATES
CREATE OR REPLACE TRIGGER insert_orders_with_return_dates
INSTEAD OF INSERT 
ON VW_ORDERS_WITH_RETURN_DATES
FOR EACH ROW 
DECLARE 
	var_order_id ORDERS.Order_Id%TYPE;
  var_return_date_id RETURN_DATES.Return_Date_Id%TYPE;
BEGIN
	INSERT INTO ORDERS(Customer_Id, Order_Date, Final_Price, Order_Status) VALUES
	(:NEW.Customer_Id, :NEW.Order_Date, :NEW.Final_Price, :NEW.Order_Status)
	RETURNING Order_Id INTO var_order_id;

	INSERT INTO RETURN_DATES(Return_Date) VALUES (:NEW.Return_Date)
	RETURNING Return_Date_Id INTO var_return_date_id;

	INSERT INTO ORDERS_RETURN_DATES(Order_Id, Return_Date_Id, Start_Time) 
	VALUES (var_order_id, var_return_date_id, CURRENT_TIMESTAMP);
END;
/

CREATE OR REPLACE TRIGGER update_orders_with_return_dates
INSTEAD OF UPDATE 
ON VW_ORDERS_WITH_RETURN_DATES
FOR EACH ROW 
DECLARE 
  var_return_date_id RETURN_DATES.Return_Date_Id%TYPE;
	counter NUMBER;
BEGIN
	UPDATE ORDERS 
	SET 
		Customer_Id = :NEW.Customer_Id,
		Order_Date = :NEW.Order_Date,
		Final_Price = :NEW.Final_Price,
		Order_Status = :NEW.Order_Status
	WHERE Order_Id = :OLD.Order_Id;

	IF :NEW.Return_Date != :OLD.Return_Date THEN
	
		SELECT COUNT(*) INTO counter FROM ORDERS_RETURN_DATES WHERE Order_Id = :OLD.Order_Id AND End_Time IS NULL;
		IF counter > 0 THEN
			UPDATE ORDERS_RETURN_DATES 
			SET End_Time = CURRENT_TIMESTAMP
			WHERE Order_Id = :OLD.Order_Id AND End_Time IS NULL;
		END IF;

		INSERT INTO RETURN_DATES(Return_Date) VALUES (:NEW.Return_Date)
		RETURNING Return_Date_Id INTO var_return_date_id;

		INSERT INTO ORDERS_RETURN_DATES(Order_Id, Return_Date_Id, Start_Time) 
			VALUES (:OLD.Order_Id, var_return_date_id, CURRENT_TIMESTAMP);
	
	END IF;
END;
/

CREATE OR REPLACE TRIGGER delete_orders_with_return_dates
INSTEAD OF DELETE 
ON VW_ORDERS_WITH_RETURN_DATES
FOR EACH ROW 
BEGIN

	DELETE FROM ORDER_LINES
	WHERE Order_ID = :OLD.Order_Id;

	UPDATE ORDERS_RETURN_DATES 
  SET End_Time = CURRENT_TIMESTAMP
  WHERE Order_Id = :OLD.Order_Id AND End_Time IS NULL;
END;
/

--Create triggers for VIEW_TOOLS_WITH_RENTAL_PRICES
CREATE OR REPLACE TRIGGER insert_tools_with_rental_prices
INSTEAD OF INSERT 
ON VW_TOOLS_WITH_RENTAL_PRICES
FOR EACH ROW 
DECLARE 
	var_tool_id	TOOLS.Tool_Id%TYPE;
  var_rental_price_id RENTAL_PRICES.Rental_Price_Id%TYPE;
BEGIN
	INSERT INTO TOOLS(Tool_Name, Tool_Description, Tool_Type_Id, Previous_Model, Stock_Quantity) VALUES
	(:NEW.Tool_Name, :NEW.Tool_Description, :NEW.Tool_Type_Id, :NEW.Previous_Model, :NEW.Stock_Quantity)
	RETURNING Tool_Id INTO var_tool_id;

	INSERT INTO RENTAL_PRICES(Rental_Price) VALUES (:NEW.Rental_Price)
	RETURNING Rental_Price_Id INTO var_rental_price_id;

	INSERT INTO TOOLS_RENTAL_PRICES(Tool_Id, Rental_Price_Id, Start_Time) 
	VALUES (var_tool_id, var_rental_price_id, CURRENT_TIMESTAMP);
END;
/

CREATE OR REPLACE TRIGGER update_tools_with_rental_prices
INSTEAD OF UPDATE 
ON VW_TOOLS_WITH_RENTAL_PRICES
FOR EACH ROW 
DECLARE 
  var_rental_price_id RENTAL_PRICES.Rental_Price_Id%TYPE;
	counter NUMBER;
BEGIN

	UPDATE TOOLS
	SET 
		Tool_Name = :NEW.Tool_Name,
		Tool_Description = :NEW.Tool_Description,
		Tool_Type_Id = :NEW.Tool_Type_Id,
		Previous_Model = :NEW.Previous_Model,
		Stock_Quantity = :NEW.Stock_Quantity,
		Quantity_Rented = :NEW.Quantity_Rented
	WHERE Tool_Id = :OLD.Tool_Id;

	IF :NEW.Rental_Price != :OLD.Rental_Price THEN
	
		SELECT COUNT(*) INTO counter FROM TOOLS_RENTAL_PRICES WHERE Tool_Id = :OLD.Tool_Id AND End_Time IS NULL;
		IF counter > 0 THEN
			UPDATE TOOLS_RENTAL_PRICES 
			SET End_Time = CURRENT_TIMESTAMP
			WHERE Tool_Id = :OLD.Tool_Id AND End_Time IS NULL;
		END IF;

		INSERT INTO RENTAL_PRICES(Rental_Price) VALUES (:NEW.Rental_Price)
		RETURNING Rental_Price_Id INTO var_rental_price_id;

		INSERT INTO TOOLS_RENTAL_PRICES(Tool_Id, Rental_Price_Id, Start_Time) 
			VALUES (:OLD.Tool_Id, var_rental_price_id, CURRENT_TIMESTAMP);
	
	END IF;
END;
/

CREATE OR REPLACE TRIGGER delete_tools_with_rental_prices
INSTEAD OF DELETE 
ON VW_TOOLS_WITH_RENTAL_PRICES
FOR EACH ROW 
BEGIN
	UPDATE TOOLS_RENTAL_PRICES 
    SET End_Time = CURRENT_TIMESTAMP
    WHERE Tool_Id = :OLD.Tool_Id AND End_Time IS NULL;
END;
/

--Create triggers to update quantity rented when orders are placed
CREATE OR REPLACE TRIGGER InsertQuantityRented 
AFTER INSERT ON ORDER_LINES
FOR EACH ROW
BEGIN
    UPDATE TOOLS
    SET Quantity_Rented = Quantity_Rented + :NEW.Quantity_Ordered
    WHERE Tool_Id = :NEW.Tool_Id;
END;
/

CREATE OR REPLACE TRIGGER UpdateQuantityRented 
AFTER UPDATE ON ORDER_LINES
FOR EACH ROW
BEGIN
    UPDATE TOOLS
    SET Quantity_Rented = Quantity_Rented + :NEW.Quantity_Ordered - :OLD.Quantity_Ordered
    WHERE Tool_Id = :OLD.Tool_Id;
END;
/

CREATE OR REPLACE TRIGGER DeleteQuantityRented 
AFTER DELETE ON ORDER_LINES
FOR EACH ROW
BEGIN
    UPDATE TOOLS
    SET Quantity_Rented = Quantity_Rented - :OLD.Quantity_Ordered
    WHERE Tool_Id = :OLD.Tool_Id;
END;
/

GRANT SELECT,INSERT,UPDATE,DELETE ON VW_CUSTOMERS_WITH_PHONES TO toolsUser;
GRANT SELECT,INSERT,UPDATE,DELETE ON VW_ORDERS_WITH_RETURN_DATES TO toolsUser;
GRANT SELECT,INSERT,UPDATE,DELETE ON VW_TOOLS_WITH_RENTAL_PRICES TO toolsUser;
GRANT SELECT,INSERT,UPDATE,DELETE ON CHAINSAWS TO toolsUser;
GRANT SELECT ON CUSTOMERS TO toolsUser;
GRANT SELECT ON CUSTOMERS_PHONES TO toolsUser;
GRANT SELECT ON PHONES TO toolsUser;
GRANT SELECT,INSERT,UPDATE,DELETE ON ORDER_LINES TO toolsUser;
GRANT SELECT ON ORDERS TO toolsUser;
GRANT SELECT ON ORDERS_RETURN_DATES TO toolsUser;
GRANT SELECT ON RETURN_DATES TO toolsUser;
GRANT SELECT,INSERT,UPDATE,DELETE ON POWERDRILLS TO toolsUser;
GRANT SELECT,INSERT,UPDATE,DELETE ON SCREWDRIVERS TO toolsUser;
GRANT SELECT ON TOOL_TYPES TO toolsUser;
GRANT SELECT ON TOOLS TO toolsUser;
GRANT SELECT ON TOOLS_RENTAL_PRICES TO toolsUser;
GRANT SELECT ON RENTAL_PRICES TO toolsUser;

COMMIT;